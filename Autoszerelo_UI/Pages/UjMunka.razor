@page "/munkak/uj"
@using Autoszerelo_Shared
@using Autoszerelo.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Új Munka Felvétele</PageTitle>

<h3>Új Munka Felvétele</h3>

@if (ugyfelekForDropdown == null)
{
    <p><em>Ügyfelek betöltése...</em></p>
}
else
{
    <EditForm Model="@ujMunka" OnValidSubmit="@HandleValidSubmitMunka">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="ugyfel" class="form-label">Ügyfél:</label>
            <InputSelect @bind-Value="ujMunka.UgyfelId" class="form-select" id="ugyfel">
                <option value="0">Válasszon ügyfelet...</option>
                @foreach (var ugyfel in ugyfelekForDropdown)
                {
                    <option value="@ugyfel.UgyfelId">@ugyfel.Nev (ID: @ugyfel.UgyfelId)</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => ujMunka.UgyfelId)" />
        </div>

        <div class="mb-3">
            <label for="rendszam" class="form-label">Rendszám:</label>
            <InputText id="rendszam" @bind-Value="ujMunka.Rendszam" class="form-control" />
            <ValidationMessage For="@(() => ujMunka.Rendszam)" />
        </div>

        <div class="mb-3">
            <label for="gyartasiev" class="form-label">Gyártási Év:</label>
            <InputNumber id="gyartasiev" @bind-Value="ujMunka.GyartasiEv" class="form-control" />
            <ValidationMessage For="@(() => ujMunka.GyartasiEv)" />
        </div>

        <div class="mb-3">
            <label for="kategoria" class="form-label">Kategória:</label>
            <InputSelect @bind-Value="ujMunka.Kategoria" class="form-select" id="kategoria">
                @foreach (var katValue in Enum.GetValues(typeof(MunkaKategoria)))
                {
                    <option value="@katValue">@katValue.ToString()</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => ujMunka.Kategoria)" />
        </div>

        <div class="mb-3">
            <label for="hibaleiras" class="form-label">Hiba Leírása:</label>
            <InputTextArea id="hibaleiras" @bind-Value="ujMunka.HibaLeiras" class="form-control" />
            <ValidationMessage For="@(() => ujMunka.HibaLeiras)" />
        </div>

        <div class="mb-3">
            <label for="hibasulyossaga" class="form-label">Hiba Súlyossága (1-10):</label>
            <InputNumber id="hibasulyossaga" @bind-Value="ujMunka.HibaSulyossaga" class="form-control" />
            <ValidationMessage For="@(() => ujMunka.HibaSulyossaga)" />
        </div>


        <button type="submit" class="btn btn-success" disabled="@isSaving">
            @if (isSaving)
            {
                <span class="spinner-border spinner-border-sm"></span> <span>Mentés...</span>
            }
            else
            {
                <span>Munka Mentése</span>
            }
        </button>
        <button type="button" class="btn btn-secondary" @onclick="IranyAtMunkaListara" disabled="@isSaving">Mégse</button>
    </EditForm>

    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <p class="text-danger mt-3">@errorMessage</p>
    }
    @if (!string.IsNullOrWhiteSpace(successMessage))
    {
        <p class="text-success mt-3">@successMessage</p>
    }
}

@code {
    private Munka ujMunka = new Munka { Allapot = MunkaAllapot.Felvett };
    private List<Ugyfel>? ugyfelekForDropdown;
    private bool isSaving = false;
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ugyfelekForDropdown = await Http.GetFromJsonAsync<List<Ugyfel>>("api/Ugyfelek");
        }
        catch (Exception ex)
        {
            errorMessage = $"Hiba az ügyfelek betöltése közben a legördülőhöz: {ex.Message}";
        }
    }

    private async Task HandleValidSubmitMunka()
    {
        errorMessage = null;
        successMessage = null;
        isSaving = true;
        StateHasChanged();

        try
        {
            if (ujMunka.UgyfelId == 0)
            {
                errorMessage = "Kérem, válasszon ügyfelet!";
                isSaving = false;
                StateHasChanged();
                return;
            }

            var response = await Http.PostAsJsonAsync("api/Munkak", ujMunka);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Munka sikeresen létrehozva!";
                StateHasChanged();
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/munkak");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Hiba történt a munka mentése során: {response.ReasonPhrase}. Részletek: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Váratlan hiba történt: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void IranyAtMunkaListara()
    {
        NavigationManager.NavigateTo("/munkak");
    }
}